Sort BOOL, CLUSTER, DIGIT
Name T -> BOOL
Name c1, c2, c3, c4, c5, c6, c7, c8, c9 -> CLUSTER
Name d1, d2, d3, d4, d5, d6, d7, d8, d9 -> DIGIT
Var c, c' -> CLUSTER
Var d, d' -> DIGIT
Fun cluster/1 -> BOOL
Fun digit/1 -> BOOL

Fun val/2 -> DIGIT  // val(c,c') = d
Fun qpos/2, rpos/2, cpos/2 -> CLUSTER   // pos(c,d) = c'

for D in d1,d2,d3,d4,d5,d6,d7,d8,d9 -> DIGIT D=D {
    KB: digit(D)=T
}

for C in c1,c2,c3,c4,c5,c6,c7,c8,c9 -> CLUSTER C=C {
    KB: cluster(C)=T
}

// KB: digit(val(c,c'))=T

KB: qpos(c,d)=c1 v qpos(c,d)=c2 v qpos(c,d)=c3 v
    qpos(c,d)=c4 v qpos(c,d)=c5 v qpos(c,d)=c6 v
    qpos(c,d)=c7 v qpos(c,d)=c8 v qpos(c,d)=c9
KB: rpos(c,d)=c1 v rpos(c,d)=c2 v rpos(c,d)=c3 v
    rpos(c,d)=c4 v rpos(c,d)=c5 v rpos(c,d)=c6 v
    rpos(c,d)=c7 v rpos(c,d)=c8 v rpos(c,d)=c9
KB: cpos(c,d)=c1 v cpos(c,d)=c2 v cpos(c,d)=c3 v
    cpos(c,d)=c4 v cpos(c,d)=c5 v cpos(c,d)=c6 v
    cpos(c,d)=c7 v cpos(c,d)=c8 v cpos(c,d)=c9

// In every cluster C, for every digit, there is a position
// at which this digit occurs.
for C -> CLUSTER  K<0> cluster(C)=T {
    KB: digit(d)=T -> val(C,qpos(C,d))=d
    KB: digit(d)=T -> val(C,cpos(C,d))=d
    KB: digit(d)=T -> val(C,rpos(C,d))=d
}

// A Sudoku game from Wikipedia article:
KB: qpos(c1,d5)=c1
KB: qpos(c1,d3)=c2
KB: qpos(c1,d6)=c4
KB: qpos(c1,d9)=c7
KB: qpos(c1,d8)=c8
KB: qpos(c2,d7)=c2
KB: qpos(c2,d1)=c4
KB: qpos(c2,d9)=c5
KB: qpos(c2,d5)=c6
KB: qpos(c3,d6)=c8
KB: qpos(c4,d8)=c1
KB: qpos(c4,d4)=c4
KB: qpos(c4,d7)=c7
KB: qpos(c5,d6)=c2
KB: qpos(c5,d8)=c4
KB: qpos(c5,d3)=c6
KB: qpos(c5,d2)=c8
KB: qpos(c6,d3)=c3
KB: qpos(c6,d1)=c6
KB: qpos(c6,d6)=c9
KB: qpos(c7,d6)=c2
KB: qpos(c8,d4)=c4
KB: qpos(c8,d1)=c5
KB: qpos(c8,d9)=c6
KB: qpos(c8,d8)=c8
KB: qpos(c9,d2)=c1
KB: qpos(c9,d8)=c2
KB: qpos(c9,d5)=c6
KB: qpos(c9,d7)=c8
KB: qpos(c9,d9)=c9

Call: print_kb()

// for C1 -> CLUSTER  K<0> cluster(C1)=T {
//     for C2 -> CLUSTER  K<0> cluster(C2)=T ^ ~ Ex d K<0> val(C1,C2)=d {
//         Call: print(C1,C2)
//         for D -> DIGIT  K<0> cluster(D)=T ^ K<1> val(C1,C2)=D {
//             Call: print(C1,C2,D)
//         }
//     }
// }

if K<1> val(c9,c4)=d4 {
    Call: print(c9,c4,d4)
}

